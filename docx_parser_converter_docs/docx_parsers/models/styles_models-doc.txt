DOCX PARSER CONVERTER - STYLES_MODELS.PY DOCUMENTATION
======================================================

FILE PURPOSE:
This file defines comprehensive Pydantic data models for representing style-related structures in DOCX documents. It provides models for paragraph styles, run styles, fonts, spacing, indentation, and the overall styles schema. These models capture the formatting and appearance properties of document elements.

IMPORTS:
- pydantic.BaseModel, pydantic.Field: For data validation and modeling
- typing.List, typing.Optional: For type hints

FUNCTIONS:
None defined in this file.

CLASSES/DATA MODELS:

1. SpacingProperties(BaseModel)
   Purpose: Represents the spacing properties for a paragraph
   Fields:
   - before_pt (Optional[float]): The space before the paragraph in points
   - after_pt (Optional[float]): The space after the paragraph in points
   - line_pt (Optional[float]): The line spacing in points
   Description: Models paragraph spacing settings including space before, after, and line spacing.

2. IndentationProperties(BaseModel)
   Purpose: Represents the indentation properties for a paragraph
   Fields:
   - left_pt (Optional[float]): The left indentation in points
   - right_pt (Optional[float]): The right indentation in points
   - firstline_pt (Optional[float]): The first line indentation in points
   Description: Models paragraph indentation settings for left, right, and first-line indentation.

3. FontProperties(BaseModel)
   Purpose: Represents the font properties for text
   Fields:
   - ascii (Optional[str]): The ASCII font
   - hAnsi (Optional[str]): The high ANSI font
   - eastAsia (Optional[str]): The East Asian font
   - cs (Optional[str]): The complex script font
   Description: Models font family settings for different character sets and scripts.

4. LanguageProperties(BaseModel)
   Purpose: Represents the language properties for text
   Fields:
   - val (Optional[str]): The language value
   - eastAsia (Optional[str]): The East Asian language
   - bidi (Optional[str]): The bidirectional language
   Description: Models language settings for text, supporting different language regions and bidirectional text.

5. TabStop(BaseModel)
   Purpose: Represents a tab stop within a paragraph
   Fields:
   - val (str): The type of tab stop (required)
   - pos (float): The position of the tab stop in points (required)
   Description: Models individual tab stops that define text alignment positions within paragraphs.

6. ParagraphStyleProperties(BaseModel)
   Purpose: Represents the style properties for a paragraph
   Fields:
   - style_id (Optional[str]): The style ID of the paragraph
   - spacing (Optional[SpacingProperties]): The spacing properties
   - indent (Optional[IndentationProperties]): The indentation properties
   - outline_level (Optional[int]): The outline level
   - widow_control (Optional[bool]): The widow control setting
   - suppress_auto_hyphens (Optional[bool]): The suppress auto hyphens setting
   - bidi (Optional[bool]): The bidirectional setting
   - justification (Optional[str]): The justification setting
   - keep_next (Optional[bool]): The keep next setting
   - suppress_line_numbers (Optional[bool]): The suppress line numbers setting
   - tabs (Optional[List[TabStop]]): The list of tab stops
   Description: Comprehensive model for all paragraph-level formatting properties including spacing, indentation, alignment, and special formatting options.

7. RunStyleProperties(BaseModel)
   Purpose: Represents the style properties for a text run
   Fields:
   - font (Optional[FontProperties]): The font properties
   - size_pt (Optional[float]): The font size in points
   - color (Optional[str]): The font color
   - bold (Optional[bool]): The bold setting
   - italic (Optional[bool]): The italic setting
   - underline (Optional[str]): The underline setting
   - strikethrough (Optional[bool]): The strikethrough setting
   - hidden (Optional[bool]): The hidden setting
   - lang (Optional[LanguageProperties]): The language properties
   - highlight (Optional[str]): The highlight color
   - shading (Optional[str]): The shading color
   - text_position_pt (Optional[float]): The text position in points
   - kerning (Optional[int]): The kerning value
   - character_spacing_pt (Optional[float]): The character spacing in points
   - emboss (Optional[bool]): The emboss setting
   - outline (Optional[bool]): The outline setting
   - shadow (Optional[bool]): The shadow setting
   - all_caps (Optional[bool]): The all caps setting
   - small_caps (Optional[bool]): The small caps setting
   Description: Comprehensive model for all character-level formatting properties including font, size, color, effects, and text positioning.

8. Style(BaseModel)
   Purpose: Represents a style definition in the document
   Fields:
   - style_id (str): The ID of the style (required)
   - name (str): The name of the style (required)
   - based_on (Optional[str]): The style this style is based on
   - paragraph_properties (Optional[ParagraphStyleProperties]): The paragraph style properties
   - run_properties (Optional[RunStyleProperties]): The run style properties
   Description: Models a complete style definition that can contain both paragraph and run properties and can inherit from other styles.

9. StyleDefaults(BaseModel)
   Purpose: Represents the default styles for various elements in the document
   Fields:
   - paragraph (Optional[str]): The default paragraph style
   - character (Optional[str]): The default character style
   - numbering (Optional[str]): The default numbering style
   - table (Optional[str]): The default table style
   Description: Models the default style assignments for different document element types.

10. StylesSchema(BaseModel)
    Purpose: Represents the overall styles schema for the document
    Fields:
    - styles (List[Style]): The list of styles in the document (required)
    - style_type_defaults (StyleDefaults): The default styles for different elements (required)
    - doc_defaults_rpr (Optional[RunStyleProperties]): The default run properties
    - doc_defaults_ppr (Optional[ParagraphStyleProperties]): The default paragraph properties
    Description: Top-level model that contains all style information for a document, including individual styles, defaults, and document-level default properties.

DEPENDENCIES:
- Pydantic for data validation and modeling
- Standard typing module for type hints

DATA RELATIONSHIPS:
- StylesSchema contains multiple Style objects and StyleDefaults
- Style can contain both ParagraphStyleProperties and RunStyleProperties
- ParagraphStyleProperties contains SpacingProperties, IndentationProperties, and TabStop objects
- RunStyleProperties contains FontProperties and LanguageProperties
- Styles can inherit from other styles through the based_on field

USAGE CONTEXT:
These models are used throughout the DOCX parser to represent the complex styling system of DOCX documents. They provide a structured way to store, manipulate, and apply formatting properties during document parsing and conversion processes. 