DOCX PARSER CONVERTER - TABLES_PARSER.PY DOCUMENTATION
======================================================

FILE PURPOSE:
This file contains the TablesParser class that extracts and parses table elements from DOCX document structures. It handles the conversion of table XML elements into structured Table objects, coordinating the parsing of table properties, grid structure, and rows.

IMPORTS:
- lxml.etree: For XML parsing and manipulation
- json: For JSON serialization in the main section
- docx_parser_converter.docx_parsers.utils: For utility functions (read_binary_from_file_path, extract_xml_root_from_docx)
- docx_parser_converter.docx_parsers.helpers.common_helpers.NAMESPACE: For XML namespace handling
- docx_parser_converter.docx_parsers.models.table_models.Table: For table data model
- docx_parser_converter.docx_parsers.tables.table_properties_parser.TablePropertiesParser: For parsing table properties
- docx_parser_converter.docx_parsers.tables.table_grid_parser.TableGridParser: For parsing table grid structure
- docx_parser_converter.docx_parsers.tables.table_row_parser.TableRowParser: For parsing table rows

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. TablesParser
   Purpose: A parser for extracting tables from an XML element
   Description: This class handles the extraction and parsing of table elements from DOCX documents, converting them into structured Table objects. It coordinates the parsing of different table components including properties, grid structure, and rows.

   METHODS:

   __init__(self, table_element: etree._Element)
   Purpose: Initializes the TablesParser with the given table XML element
   Parameters:
   - table_element (etree._Element): The root XML element of the table
   Description: Sets up the parser with a specific table element for processing. The table element should contain all table components including properties, grid, and rows.

   parse(self) -> Table
   Purpose: Parses the table XML element into a Table object
   Returns: Table - The parsed Table object
   Description: Main parsing method that coordinates the extraction of all table components:
   
   1. Extracts table properties using TablePropertiesParser
   2. Extracts table grid structure using TableGridParser
   3. Extracts all table rows using TableRowParser
   4. Assembles components into a complete Table object

   The method maintains the hierarchical structure of tables while delegating specialized parsing to appropriate parsers.

INSTANCE ATTRIBUTES:
- root: The XML element representing the table

DATA MODELS USED:
- Table: Container for table properties, grid structure, and rows
- TableProperties: Table-level formatting and layout properties
- TableGrid: Column structure and width information
- TableRow: Individual table rows with cells and properties

DEPENDENCIES:
- lxml for XML parsing
- Specialized parsers for different table components
- Table data models for structured representation
- Helper functions for XML namespace handling

USAGE CONTEXT:
This parser is used by higher-level parsers (like DocumentParser) to process table elements within documents. Tables are complex structural elements that require coordinated parsing of multiple components to maintain their layout and formatting information.

TABLE COMPONENTS PARSED:
- Table Properties: Style, width, alignment, borders, and layout settings
- Table Grid: Column definitions and width specifications
- Table Rows: Individual rows containing cells and row-level properties
- Table Cells: Cell content, properties, and formatting (handled by row parser)

PARSING COORDINATION:
The parser acts as a coordinator, delegating specific parsing tasks to specialized parsers:
- TablePropertiesParser: Handles table-level properties and formatting
- TableGridParser: Processes column structure and widths
- TableRowParser: Manages row parsing including cells and row properties

ERROR HANDLING:
- Handles missing table components gracefully
- Uses specialized parsers that provide appropriate defaults
- Maintains table structure even with incomplete XML

MAIN SECTION:
The file includes a main section that demonstrates usage by:
1. Loading a DOCX file from a specified path
2. Extracting the document XML root
3. Finding all table elements in the document
4. Creating TablesParser instances for each table
5. Parsing tables and outputting results as JSON

This serves as both a test and a comprehensive example of how to use the TablesParser class for table extraction workflows.

TECHNICAL NOTES:
- Uses XML namespace for proper element identification
- Maintains table structure hierarchy during parsing
- Integrates with multiple specialized parsers for comprehensive table processing
- Provides complete table representation suitable for conversion to other formats 