DOCX PARSER CONVERTER - TABLE_PROPERTIES_PARSER.PY DOCUMENTATION
================================================================

FILE PURPOSE:
This file contains the TablePropertiesParser class that extracts and parses table properties from DOCX table XML elements. It handles the conversion of table property XML elements into structured TableProperties objects, including width, alignment, borders, shading, margins, and layout settings.

IMPORTS:
- lxml.etree: For XML parsing and manipulation
- typing.Optional: For type hints
- docx_parser_converter.docx_parsers.helpers.common_helpers: For XML helper functions (extract_element, extract_attribute, safe_int)
- docx_parser_converter.docx_parsers.models.table_models: For table data models (TableProperties, TableWidth, TableIndent, TableLook, TableCellBorders, ShadingProperties, MarginProperties, BorderProperties)
- docx_parser_converter.docx_parsers.utils.convert_twips_to_points: For unit conversion

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. TablePropertiesParser
   Purpose: A parser for extracting table properties from an XML element
   Description: This class provides static methods for parsing various table properties from DOCX table property XML elements. It handles the extraction of style, width, alignment, indentation, margins, borders, shading, layout, and appearance settings.

   METHODS:

   parse(tblPr_element: etree.Element) -> TableProperties [STATIC METHOD]
   Purpose: Parses table properties from the given XML element
   Parameters:
   - tblPr_element (etree.Element): The table properties XML element
   Returns: TableProperties - The parsed table properties
   Description: Main parsing method that extracts all table property components and assembles them into a complete TableProperties object. Coordinates the parsing of different property types including style, width, justification, indentation, margins, borders, shading, layout, and look settings.

   extract_table_indent(element: etree.Element) -> Optional[TableIndent] [STATIC METHOD]
   Purpose: Extracts table indent properties from the given XML element
   Parameters:
   - element (etree.Element): The XML element containing table properties
   Returns: Optional[TableIndent] - The parsed table indent properties, or None if not found
   Description: Parses table indentation settings including type and width. Converts width values from twips to points for consistency.

   extract_table_width(element: etree.Element) -> Optional[TableWidth] [STATIC METHOD]
   Purpose: Extracts table width properties from the given XML element
   Parameters:
   - element (etree.Element): The XML element containing table properties
   Returns: Optional[TableWidth] - The parsed table width properties, or None if not found
   Description: Parses table width settings including type (auto, dxa, pct) and width value. Converts width values from twips to points when applicable.

   extract_justification(element: etree.Element) -> Optional[str] [STATIC METHOD]
   Purpose: Extracts table justification from the given XML element
   Parameters:
   - element (etree.Element): The XML element containing table properties
   Returns: Optional[str] - The justification value, or None if not found
   Description: Extracts table alignment settings (left, center, right, etc.) from the justification element.

   extract_table_style(element: etree.Element) -> Optional[str] [STATIC METHOD]
   Purpose: Extracts table style from the given XML element
   Parameters:
   - element (etree.Element): The XML element containing table properties
   Returns: Optional[str] - The table style name, or None if not found
   Description: Extracts the table style reference that defines the table's appearance and formatting.

   extract_table_cell_margins(element: etree.Element) -> Optional[MarginProperties] [STATIC METHOD]
   Purpose: Extracts table cell margins from the given XML element
   Parameters:
   - element (etree.Element): The XML element containing table properties
   Returns: Optional[MarginProperties] - The parsed table cell margins, or None if not found
   Description: Parses default cell margins for the table including top, left, bottom, and right margins. Handles both standard and alternative attribute names (start/end for left/right).

   extract_margin_value(margin_element: etree.Element, side: str) -> Optional[float] [STATIC METHOD]
   Purpose: Extracts a specific margin value from a margin element
   Parameters:
   - margin_element (etree.Element): The margin container element
   - side (str): The side to extract (top, left, bottom, right, start, end)
   Returns: Optional[float] - The margin value in points, or None if not found
   Description: Helper method that extracts individual margin values and converts them from twips to points.

   extract_table_layout(element: etree.Element) -> Optional[str] [STATIC METHOD]
   Purpose: Extracts table layout type from the given XML element
   Parameters:
   - element (etree.Element): The XML element containing table properties
   Returns: Optional[str] - The table layout type, or None if not found
   Description: Extracts table layout settings (fixed, autofit) that control how the table adjusts to content.

   extract_table_look(element: etree.Element) -> Optional[TableLook] [STATIC METHOD]
   Purpose: Extracts table look properties from the given XML element
   Parameters:
   - element (etree.Element): The XML element containing table properties
   Returns: Optional[TableLook] - The parsed table look properties, or None if not found
   Description: Parses table appearance settings including first row, last row, first column, last column, and banding options that control conditional formatting.

   extract_table_cell_borders(borders_element: Optional[etree.Element]) -> Optional[TableCellBorders] [STATIC METHOD]
   Purpose: Extracts table cell borders from the given borders XML element
   Parameters:
   - borders_element (Optional[etree.Element]): The table borders XML element
   Returns: Optional[TableCellBorders] - The parsed table cell borders, or None if not found
   Description: Parses all table border settings including top, left, bottom, right, inside horizontal, and inside vertical borders. Each border includes style, width, color, and spacing properties.

   extract_border(border_element: Optional[etree.Element]) -> Optional[BorderProperties] [STATIC METHOD]
   Purpose: Extracts border properties from a border XML element
   Parameters:
   - border_element (Optional[etree.Element]): The border XML element
   Returns: Optional[BorderProperties] - The parsed border properties, or None if not found
   Description: Helper method that extracts individual border properties including style (single, double, etc.), size, color, and spacing.

   extract_shading(shd_element: Optional[etree.Element]) -> Optional[ShadingProperties] [STATIC METHOD]
   Purpose: Extracts shading properties from a shading XML element
   Parameters:
   - shd_element (Optional[etree.Element]): The shading XML element
   Returns: Optional[ShadingProperties] - The parsed shading properties, or None if not found
   Description: Parses table background shading including pattern type, foreground color, and background color settings.

INSTANCE ATTRIBUTES:
None (static method class).

DATA MODELS USED:
- TableProperties: Container for all table-level properties
- TableWidth: Width specifications with type and value
- TableIndent: Indentation settings for table positioning
- TableLook: Conditional formatting appearance settings
- TableCellBorders: Complete border specifications for all sides
- ShadingProperties: Background shading and pattern settings
- MarginProperties: Margin specifications for all sides
- BorderProperties: Individual border formatting properties

DEPENDENCIES:
- lxml for XML parsing
- Helper functions for XML element and attribute extraction
- Utility functions for unit conversion from twips to points
- Table data models for structured representation

USAGE CONTEXT:
This parser is used by higher-level table parsers to extract comprehensive table formatting information. Table properties control the overall appearance, layout, and behavior of tables in DOCX documents, including:
- Visual appearance (borders, shading, style)
- Layout behavior (width, alignment, indentation)
- Cell formatting defaults (margins)
- Conditional formatting (table look settings)

TABLE PROPERTY TYPES SUPPORTED:
- **Style**: Reference to predefined table styles
- **Width**: Table width with various measurement types
- **Justification**: Table alignment within the document
- **Indentation**: Table positioning relative to margins
- **Cell Margins**: Default spacing within table cells
- **Borders**: Complete border formatting for all table edges
- **Shading**: Background colors and patterns
- **Layout**: Table sizing behavior (fixed vs. auto)
- **Look**: Conditional formatting for special rows/columns

UNIT CONVERSION:
- Converts measurements from twips to points for consistency
- Handles various measurement types (dxa, pct, auto)
- Maintains precision during conversion
- Provides fallback values for missing measurements

ERROR HANDLING:
- Returns None for missing property elements
- Uses safe integer conversion to handle malformed values
- Handles alternative attribute names for internationalization
- Provides graceful degradation when properties are incomplete

TECHNICAL NOTES:
- Uses static methods for stateless operation
- Supports both standard and alternative attribute names
- Maintains comprehensive property coverage for complete table formatting
- Integrates with the broader table parsing system for complete table representation 