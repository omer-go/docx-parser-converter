DOCX PARSER CONVERTER - TABLE_CELL_PROPERTIES_PARSER.PY DOCUMENTATION
======================================================================

FILE PURPOSE:
This file contains the TableCellPropertiesParser class that extracts and parses table cell properties from DOCX table cell XML elements. It handles the conversion of table cell property XML elements into structured TableCellProperties objects, including width, borders, shading, margins, alignment, and cell merging settings.

IMPORTS:
- lxml.etree: For XML parsing and manipulation
- typing.Optional: For type hints
- docx_parser_converter.docx_parsers.helpers.common_helpers: For XML helper functions (extract_element, extract_attribute, safe_int)
- docx_parser_converter.docx_parsers.models.table_models: For table data models (TableCellProperties, TableWidth)
- docx_parser_converter.docx_parsers.tables.table_properties_parser.TablePropertiesParser: For shared table property parsing
- docx_parser_converter.docx_parsers.utils: For unit conversion (convert_twips_to_points, convert_half_points_to_points)

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. TableCellPropertiesParser
   Purpose: A parser for extracting table cell properties from an XML element
   Description: This class provides static methods for parsing various table cell properties from DOCX table cell property XML elements. It handles the extraction of cell-specific formatting including width, borders, shading, margins, alignment, text direction, and cell merging settings.

   METHODS:

   parse(tcPr_element: Optional[etree.Element]) -> TableCellProperties [STATIC METHOD]
   Purpose: Parses table cell properties from the given XML element
   Parameters:
   - tcPr_element (Optional[etree.Element]): The cell properties XML element
   Returns: TableCellProperties - The parsed table cell properties
   Description: Main parsing method that extracts all table cell property components and assembles them into a complete TableCellProperties object. Coordinates the parsing of width, borders, shading, margins, alignment, text direction, and merging settings.

   extract_table_cell_width(element: Optional[etree.Element]) -> Optional[TableWidth] [STATIC METHOD]
   Purpose: Extracts table cell width from the given XML element
   Parameters:
   - element (Optional[etree.Element]): The XML element
   Returns: Optional[TableWidth] - The table cell width, or None if not found
   Description: Parses cell width settings including type (auto, dxa, pct) and width value. Converts width values from twips to points for consistency.

   extract_text_direction(element: Optional[etree.Element]) -> Optional[str] [STATIC METHOD]
   Purpose: Extracts text direction from the given XML element
   Parameters:
   - element (Optional[etree.Element]): The XML element
   Returns: Optional[str] - The text direction, or None if not found
   Description: Parses text flow direction settings for international support including left-to-right, right-to-left, and vertical text orientations.

   extract_vertical_alignment(element: Optional[etree.Element]) -> Optional[str] [STATIC METHOD]
   Purpose: Extracts vertical alignment from the given XML element
   Parameters:
   - element (Optional[etree.Element]): The XML element
   Returns: Optional[str] - The vertical alignment, or None if not found
   Description: Parses vertical alignment settings within the cell including top, center, bottom, and justify options.

   extract_hide_mark(element: Optional[etree.Element]) -> Optional[bool] [STATIC METHOD]
   Purpose: Extracts hide mark from the given XML element
   Parameters:
   - element (Optional[etree.Element]): The XML element
   Returns: Optional[bool] - True if the hide mark is found, otherwise None
   Description: Parses hide mark settings that control whether cell markers are visible in the document.

   extract_cell_merge(element: Optional[etree.Element]) -> Optional[str] [STATIC METHOD]
   Purpose: Extracts cell merge from the given XML element
   Parameters:
   - element (Optional[etree.Element]): The XML element
   Returns: Optional[str] - The cell merge value, or None if not found
   Description: Parses cell merging settings including restart, continue, and other merge states for complex table layouts.

   extract_grid_span(element: Optional[etree.Element]) -> Optional[int] [STATIC METHOD]
   Purpose: Extracts grid span from the given XML element
   Parameters:
   - element (Optional[etree.Element]): The XML element
   Returns: Optional[int] - The grid span value, or None if not found
   Description: Parses grid span settings that determine how many columns a cell spans in the table grid.

   extract_table_cell_margins(element: Optional[etree.Element]) -> Optional[dict] [STATIC METHOD]
   Purpose: Extracts table cell margins from the given XML element
   Parameters:
   - element (Optional[etree.Element]): The XML element
   Returns: Optional[dict] - The table cell margins, or None if not found
   Description: Parses cell-specific margin settings including top, left, bottom, and right margins that override table-level margin defaults.

INSTANCE ATTRIBUTES:
None (static method class).

DATA MODELS USED:
- TableCellProperties: Container for all cell-level properties
- TableWidth: Width specifications with type and value
- TableCellBorders: Border specifications for cell edges
- ShadingProperties: Background shading and pattern settings
- MarginProperties: Margin specifications for cell spacing

DEPENDENCIES:
- TablePropertiesParser for shared table property parsing (borders, shading)
- XML helper functions for element and attribute extraction
- Unit conversion utilities for measurements
- Table data models for structured representation

USAGE CONTEXT:
This parser is used by table cell parsers to extract comprehensive cell formatting information. Table cell properties control the appearance and behavior of individual cells within tables, including:
- Visual appearance (borders, shading, width)
- Layout behavior (alignment, margins, spanning)
- Text flow (direction, vertical alignment)
- Table structure (merging, grid spanning)

CELL PROPERTY TYPES SUPPORTED:
- **Width**: Cell width with various measurement types
- **Borders**: Complete border formatting for all cell edges
- **Shading**: Background colors and patterns
- **Margins**: Cell-specific spacing overrides
- **Alignment**: Vertical alignment within the cell
- **Text Direction**: Text flow direction for international support
- **Merging**: Cell merge states for complex layouts
- **Spanning**: Grid span for multi-column cells
- **Visibility**: Hide mark settings for cell markers

UNIT CONVERSION:
- Converts width measurements from twips to points
- Converts margin measurements from twips to points
- Handles various measurement types (dxa, pct, auto)
- Maintains precision during conversion
- Provides fallback values for missing measurements

SHARED FUNCTIONALITY:
- **Border Parsing**: Uses TablePropertiesParser for consistent border handling
- **Shading Parsing**: Uses TablePropertiesParser for consistent shading handling
- **Margin Parsing**: Implements cell-specific margin extraction
- **Width Parsing**: Handles cell-specific width specifications

ERROR HANDLING:
- Returns None for missing property elements
- Uses safe integer conversion to handle malformed values
- Handles optional elements gracefully
- Provides fallback values for incomplete properties
- Continues processing when individual properties fail

TECHNICAL FEATURES:
- **Static Methods**: Stateless operation for efficiency
- **Comprehensive Coverage**: Supports all major cell property types
- **Unit Consistency**: Converts all measurements to points
- **Shared Parsing**: Reuses table-level parsers for consistency
- **Type Safety**: Uses proper type hints and safe conversions

INTEGRATION POINTS:
- **TablePropertiesParser**: Handles shared property types (borders, shading)
- **Table Models**: Uses structured data models for representation
- **Unit Conversion**: Consistent measurement handling

TECHNICAL NOTES:
- Uses static methods for stateless operation
- Supports comprehensive cell-level formatting coverage
- Maintains consistency with table-level property parsing
- Handles complex cell layouts including merging and spanning
- Provides complete cell property representation for accurate table rendering 