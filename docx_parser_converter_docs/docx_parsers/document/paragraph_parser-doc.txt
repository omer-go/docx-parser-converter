DOCX PARSER CONVERTER - PARAGRAPH_PARSER.PY DOCUMENTATION
==========================================================

FILE PURPOSE:
This file contains the ParagraphParser class that extracts and parses paragraph elements from DOCX document structures. It handles the conversion of paragraph XML elements into structured Paragraph objects, including paragraph properties, runs, styles, numbering, and tab stops.

IMPORTS:
- lxml.etree: For XML parsing and manipulation
- typing.Optional, typing.List: For type hints
- docx_parser_converter.docx_parsers.helpers.common_helpers: For XML helper functions (extract_element, extract_attribute, NAMESPACE)
- docx_parser_converter.docx_parsers.models.paragraph_models: For paragraph data models (Paragraph, Run)
- docx_parser_converter.docx_parsers.models.styles_models: For style data models (TabStop, ParagraphStyleProperties)
- docx_parser_converter.docx_parsers.document.document_numbering_parser.DocumentNumberingParser: For parsing numbering properties
- docx_parser_converter.docx_parsers.document.run_parser.RunParser: For parsing run elements
- docx_parser_converter.docx_parsers.styles.paragraph_properties_parser.ParagraphPropertiesParser: For parsing paragraph properties
- docx_parser_converter.docx_parsers.utils.convert_twips_to_points: For unit conversion

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. ParagraphParser
   Purpose: A parser for extracting paragraph elements from the DOCX document structure
   Description: This class handles the extraction of paragraph properties, runs, styles, numbering, and tabs within a paragraph element, converting them into a structured Paragraph object for further processing or conversion to other formats like HTML.

   METHODS:

   parse(self, p: etree.Element) -> Paragraph
   Purpose: Parses a paragraph element from the DOCX document
   Parameters:
   - p (etree.Element): The paragraph element to parse
   Returns: Paragraph - The parsed paragraph object
   Description: Main parsing method that extracts all components of a paragraph including properties, numbering, and runs. Coordinates the parsing of different paragraph components using specialized parsers.

   extract_paragraph_properties(self, pPr: Optional[etree.Element]) -> ParagraphStyleProperties
   Purpose: Extracts the paragraph properties from the given paragraph properties element
   Parameters:
   - pPr (Optional[etree.Element]): The paragraph properties element
   Returns: ParagraphStyleProperties - The extracted paragraph style properties
   Description: Processes paragraph properties using ParagraphPropertiesParser and additionally extracts style ID and tab stops. Creates a default ParagraphStyleProperties object if no properties element is provided.

   extract_style_id(self, pPr: Optional[etree.Element]) -> Optional[str]
   Purpose: Extracts the style ID from the paragraph properties element
   Parameters:
   - pPr (Optional[etree.Element]): The paragraph properties element
   Returns: Optional[str] - The style ID, or None if not found
   Description: Looks for the paragraph style element (w:pStyle) and extracts its 'val' attribute which contains the style identifier.

   extract_tabs(self, pPr: Optional[etree.Element]) -> Optional[List[TabStop]]
   Purpose: Extracts the tab stops from the paragraph properties element
   Parameters:
   - pPr (Optional[etree.Element]): The paragraph properties element
   Returns: Optional[List[TabStop]] - The list of tab stops, or None if not found
   Description: Searches for tab elements within the paragraph properties and delegates to parse_tabs method for detailed parsing.

   extract_runs(self, p: etree.Element) -> List[Run]
   Purpose: Extracts the run elements from the paragraph element
   Parameters:
   - p (etree.Element): The paragraph element
   Returns: List[Run] - The list of extracted runs
   Description: Finds all run elements within the paragraph and uses RunParser to convert each run XML element into a Run object. Maintains the order of runs as they appear in the document.

   parse_tabs(self, tabs_elem: etree.Element) -> List[TabStop]
   Purpose: Parses the tab stops from the tabs element
   Parameters:
   - tabs_elem (etree.Element): The tabs element
   Returns: List[TabStop] - The list of parsed tab stops
   Description: Iterates through individual tab elements, extracts their type (val) and position (pos) attributes, converts position from twips to points, and creates TabStop objects. Includes warning messages for malformed tab elements.

INSTANCE ATTRIBUTES:
None (stateless parser class).

DATA MODELS USED:
- Paragraph: Container for paragraph properties, runs, and numbering
- Run: Individual text runs within the paragraph
- ParagraphStyleProperties: Formatting properties for the paragraph
- TabStop: Tab stop definitions with type and position
- Numbering: Numbering properties for list items

DEPENDENCIES:
- lxml for XML parsing
- Helper functions for XML element and attribute extraction
- Specialized parsers for different paragraph components
- Utility functions for unit conversion
- Pydantic models for data structure

USAGE CONTEXT:
This parser is used by higher-level parsers (like DocumentParser) to process individual paragraphs within documents. Paragraphs are fundamental structural elements in DOCX documents that contain formatted text runs and can participate in lists or have specific styling.

PARSING COMPONENTS:
- Paragraph properties: Spacing, indentation, alignment, and other formatting
- Style references: Links to predefined paragraph styles
- Numbering properties: List participation and level information
- Tab stops: Custom tab positions and types
- Text runs: Formatted text content within the paragraph

ERROR HANDLING:
- Handles missing paragraph properties gracefully with defaults
- Provides warning messages for malformed tab elements
- Uses Optional types to handle missing elements safely

TECHNICAL NOTES:
- Converts measurements from twips to points for consistency
- Maintains XML element order when processing runs
- Integrates with multiple specialized parsers for comprehensive paragraph processing 