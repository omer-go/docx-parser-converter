DOCX PARSER CONVERTER - NUMBERING_PARSER.PY DOCUMENTATION
===========================================================

FILE PURPOSE:
This file contains the NumberingParser class that extracts and parses numbering definitions from DOCX files. It processes the numbering.xml file within a DOCX document to extract list formatting information including numbered lists, bulleted lists, and multi-level lists, converting them into structured Pydantic models.

IMPORTS:
- typing.List, typing.Optional, typing.Union: For type hints
- lxml.etree: For XML parsing and manipulation
- docx_parser_converter.docx_parsers.utils: For utility functions (extract_xml_root_from_docx, read_binary_from_file_path, convert_twips_to_points, extract_xml_root_from_string)
- docx_parser_converter.docx_parsers.helpers.common_helpers: For XML helper functions (extract_element, extract_attribute, NAMESPACE)
- docx_parser_converter.docx_parsers.models.numbering_models: For numbering data models (NumberingLevel, NumberingInstance, NumberingSchema)
- docx_parser_converter.docx_parsers.models.styles_models: For style data models (FontProperties, IndentationProperties)
- docx_parser_converter.docx_parsers.styles.paragraph_properties_parser.ParagraphPropertiesParser: For parsing paragraph properties
- json: For JSON serialization in the main section

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. NumberingParser
   Purpose: Parses the numbering definitions from a DOCX file
   Description: This class extracts and parses the numbering definitions found in the numbering.xml file of a DOCX document, converting them into structured Pydantic models for further processing or conversion to other formats.

   METHODS:

   __init__(self, source: Union[bytes, str])
   Purpose: Initializes the NumberingParser with the given DOCX file or numbering XML content
   Parameters:
   - source (Union[bytes, str]): Either the binary content of the DOCX file or the numbering.xml content as a string
   Description: Determines the source type and extracts the XML root from either a DOCX file or XML string, then immediately parses the numbering schema.

   parse(self) -> NumberingSchema
   Purpose: Parses the numbering XML into a NumberingSchema
   Returns: NumberingSchema - The parsed numbering schema
   Description: Main parsing method that iterates through all numbering instances in the XML, extracts their properties, and creates a complete NumberingSchema object.

   extract_levels(self, abstractNumId: int) -> List[NumberingLevel]
   Purpose: Extracts the levels for a given abstract numbering ID
   Parameters:
   - abstractNumId (int): The abstract numbering ID
   Returns: List[NumberingLevel] - The list of extracted numbering levels
   Description: Finds the abstract numbering definition by ID and extracts all its levels, creating NumberingLevel objects for each.

   extract_level(self, numId: int, lvl: etree.Element) -> NumberingLevel
   Purpose: Extracts a single numbering level
   Parameters:
   - numId (int): The numbering ID
   - lvl (etree.Element): The XML element representing the numbering level
   Returns: NumberingLevel - The extracted numbering level
   Description: Parses a single level element to extract all its properties including indent level, start value, format, text, justification, indentation, tabs, and fonts.

   extract_indentation(self, lvl: etree.Element) -> Optional[IndentationProperties]
   Purpose: Extracts indentation properties from a numbering level
   Parameters:
   - lvl (etree.Element): The XML element representing the numbering level
   Returns: Optional[IndentationProperties] - The extracted indentation properties
   Description: Looks for paragraph properties within the level and extracts indentation settings using the ParagraphPropertiesParser.

   extract_tab(self, lvl: etree.Element) -> Optional[float]
   Purpose: Extracts tab stop properties from a numbering level
   Parameters:
   - lvl (etree.Element): The XML element representing the numbering level
   Returns: Optional[float] - The tab stop position in points
   Description: Searches for tab stop definitions within the level's paragraph properties and converts the position from twips to points.

   extract_fonts(self, lvl: etree.Element) -> Optional[FontProperties]
   Purpose: Extracts font properties from a numbering level
   Parameters:
   - lvl (etree.Element): The XML element representing the numbering level
   Returns: Optional[FontProperties] - The extracted font properties
   Description: Looks for run properties within the level and extracts font family settings for different character sets.

   get_numbering_schema(self) -> NumberingSchema
   Purpose: Gets the parsed numbering schema
   Returns: NumberingSchema - The parsed numbering schema
   Description: Simple getter method that returns the parsed numbering schema stored in the instance.

DATA MODELS USED:
- NumberingSchema: Top-level container for all numbering definitions
- NumberingInstance: Represents a single numbering definition with multiple levels
- NumberingLevel: Represents a single level within a numbering scheme
- FontProperties: Font settings for numbering text
- IndentationProperties: Indentation settings for numbering levels

DEPENDENCIES:
- lxml for XML parsing
- Pydantic models for data structure
- Utility functions for XML extraction and unit conversion
- Helper functions for XML element and attribute extraction
- ParagraphPropertiesParser for parsing paragraph-level properties

USAGE CONTEXT:
This parser is used to extract list and numbering information from DOCX documents. It processes the numbering.xml file to understand how numbered and bulleted lists should be formatted and displayed. The parsed information is used by other components to properly render lists during document conversion.

MAIN SECTION:
The file includes a main section that demonstrates usage by loading a DOCX file, parsing its numbering schema, and printing the results as JSON. This serves as both a test and an example of how to use the NumberingParser class. 