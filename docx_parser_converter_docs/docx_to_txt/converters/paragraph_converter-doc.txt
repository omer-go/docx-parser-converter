DOCX PARSER CONVERTER - TXT PARAGRAPH_CONVERTER.PY DOCUMENTATION
==================================================================

FILE PURPOSE:
This file contains the ParagraphConverter class that converts DOCX paragraph elements to plain text representation. It handles the conversion of paragraph content, numbering, indentation, and spacing to create properly formatted plain text output.

IMPORTS:
- docx_parser_converter.docx_parsers.models.paragraph_models.Paragraph: For paragraph data model
- docx_parser_converter.docx_to_txt.converters.run_converter.RunConverter: For converting paragraph runs
- docx_parser_converter.docx_to_txt.converters.numbering_converter.NumberingConverter: For numbering conversion

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. ParagraphConverter
   Purpose: Class to convert paragraphs to plain text
   Description: This class provides static methods for converting DOCX paragraph elements to plain text representation. It handles paragraph content, numbering, indentation, and spacing to create properly formatted plain text output with appropriate formatting preservation.

   METHODS:

   convert_paragraph(paragraph: Paragraph, numbering_schema, indent: bool) -> str [STATIC METHOD]
   Purpose: Convert a paragraph to plain text
   Parameters:
   - paragraph (Paragraph): The paragraph object
   - numbering_schema: The numbering schema
   - indent (bool): Whether to apply indentation
   Returns: str - Plain text representation of the paragraph
   Description: Main conversion method that processes a complete paragraph and generates plain text. The method:
   
   1. **Numbering Processing**: Adds numbering text if paragraph is numbered
   2. **Run Conversion**: Converts all runs within the paragraph to text
   3. **Indentation**: Applies indentation if enabled and properties exist
   4. **Text Assembly**: Combines all components into complete paragraph text
   
   Handles complex paragraph structures including:
   - Numbered and bulleted lists
   - Multiple runs with different content
   - Indentation based on paragraph properties
   - Text content preservation

   add_indentation(text: str, indent_value: float) -> str [STATIC METHOD]
   Purpose: Add indentation to the text based on the indent value in points
   Parameters:
   - text (str): The text to indent
   - indent_value (float): The indentation value in points
   Returns: str - The indented text
   Description: Converts point-based indentation to tab and space characters. Calculates appropriate number of tabs and spaces based on standard tab size (36 points) and applies them to the text.

   add_spacing(prev_paragraph: Paragraph, curr_paragraph: Paragraph) -> str [STATIC METHOD]
   Purpose: Add spacing between paragraphs based on their spacing properties
   Parameters:
   - prev_paragraph (Paragraph): The previous paragraph
   - curr_paragraph (Paragraph): The current paragraph
   Returns: str - Newlines to add for spacing
   Description: Calculates appropriate spacing between paragraphs based on before and after spacing properties. Converts point-based spacing to newline characters using standard line height calculations.

   convert_paragraph_properties(properties, indent: bool) -> str [STATIC METHOD]
   Purpose: Convert paragraph properties to text format
   Parameters:
   - properties: The paragraph properties
   - indent (bool): Whether to apply indentation
   Returns: str - Text representation of paragraph properties
   Description: Placeholder method for converting paragraph properties to text format. Currently returns empty string but provides extension point for future property handling.

INSTANCE ATTRIBUTES:
None (static method class).

DATA MODELS USED:
- Paragraph: Complete paragraph representation with properties and runs
- ParagraphProperties: Paragraph-level formatting specifications
- Run: Individual text runs within the paragraph

DEPENDENCIES:
- RunConverter for processing paragraph runs
- NumberingConverter for list and numbering handling
- Paragraph data models for structured input

USAGE CONTEXT:
This converter is used throughout the text generation pipeline to convert paragraph elements. Paragraphs are fundamental content blocks in documents, containing:
- **Text Content**: Individual runs with content
- **Numbering**: List formatting and numbering
- **Indentation**: Paragraph-level indentation
- **Spacing**: Inter-paragraph spacing

PARAGRAPH FEATURES SUPPORTED:
- **Text Runs**: Multiple runs with content
- **Numbering**: Numbered and bulleted lists
- **Indentation**: Tab and space-based indentation
- **Spacing**: Newline-based paragraph spacing
- **Text Generation**: Clean plain text output

CONVERSION PROCESS:
- **Numbering Integration**: Adds list numbering when present
- **Run Processing**: Converts all contained text runs
- **Indentation Application**: Applies paragraph-level indentation
- **Text Assembly**: Creates complete plain text paragraphs

INDENTATION HANDLING:
- **Point Conversion**: Converts point measurements to tabs and spaces
- **Tab Calculation**: Uses standard 36-point tab size
- **Space Calculation**: Fills remaining space with spaces
- **Text Prefixing**: Adds indentation to beginning of text

SPACING CALCULATIONS:
- **Property Extraction**: Gets before and after spacing from paragraphs
- **Point Summation**: Combines spacing values from adjacent paragraphs
- **Newline Conversion**: Converts points to newlines using 12-point line height
- **Threshold Application**: Uses 6-point threshold for newline decisions

ERROR HANDLING:
- **Missing Properties**: Handles paragraphs without properties gracefully
- **Empty Paragraphs**: Processes paragraphs with no runs
- **Numbering Errors**: Continues processing when numbering fails
- **Indentation Errors**: Provides fallback when indentation calculation fails

TECHNICAL FEATURES:
- **Static Methods**: Stateless operation for efficiency
- **Modular Design**: Delegates specific conversions to specialized converters
- **Text Generation**: Creates clean plain text output
- **Formatting Preservation**: Maintains essential formatting through text structure

INTEGRATION POINTS:
- **RunConverter**: Processes individual text runs
- **NumberingConverter**: Handles list and numbering conversion
- **Text Generator**: Integrates with document-level text generation

USAGE EXAMPLES:

**Basic Paragraph Conversion:**
```python
text = ParagraphConverter.convert_paragraph(paragraph, numbering_schema, indent=True)
```

**Indentation Application:**
```python
indented_text = ParagraphConverter.add_indentation("Sample text", 72.0)
```

**Spacing Calculation:**
```python
spacing = ParagraphConverter.add_spacing(prev_paragraph, curr_paragraph)
```

TECHNICAL NOTES:
- Uses static methods for stateless operation
- Supports paragraph structures with multiple runs
- Maintains proper text structure and formatting
- Integrates seamlessly with the broader text conversion system
- Provides complete paragraph representation for accurate text rendering 