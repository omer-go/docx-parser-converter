DOCX PARSER CONVERTER - TXT RUN_CONVERTER.PY DOCUMENTATION
============================================================

FILE PURPOSE:
This file contains the RunConverter class that converts DOCX run elements to plain text representation. It handles the conversion of text runs and special content like tabs to create clean plain text output.

IMPORTS:
- docx_parser_converter.docx_parsers.models.paragraph_models: For run data models (Run, TextContent, TabContent)

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. RunConverter
   Purpose: Class to convert runs to plain text
   Description: This class provides static methods for converting DOCX run elements to plain text representation. It handles text content and special elements like tabs to create clean plain text output while preserving essential formatting structure.

   METHODS:

   convert_run(run: Run) -> str [STATIC METHOD]
   Purpose: Convert a run to plain text
   Parameters:
   - run (Run): The run object
   Returns: str - Plain text representation of the run
   Description: Main conversion method that processes a complete run and generates plain text. The method:
   
   1. **Content Processing**: Iterates through all content within the run
   2. **Text Handling**: Extracts text content directly
   3. **Tab Processing**: Converts tab elements to tab characters
   4. **Text Assembly**: Combines all content into complete run text
   
   Handles different run content types including:
   - Text content with plain text extraction
   - Tab elements converted to tab characters
   - Multiple content types within a single run
   - Clean text output without formatting

INSTANCE ATTRIBUTES:
None (static method class).

DATA MODELS USED:
- Run: Complete run representation with content
- TextContent: Text content within runs
- TabContent: Tab elements within runs

DEPENDENCIES:
- Run and content data models for structured input

USAGE CONTEXT:
This converter is used throughout the text generation pipeline to convert run elements. Runs are the smallest content units in documents, containing:
- **Text Content**: Plain text with no formatting
- **Special Content**: Tabs and other elements
- **Content Structure**: Multiple content types within runs
- **Text Output**: Clean plain text representation

RUN FEATURES SUPPORTED:
- **Text Content**: Plain text extraction
- **Tab Handling**: Tab characters for spacing
- **Content Types**: Support for different run content types
- **Text Generation**: Clean plain text output

CONVERSION PROCESS:
- **Content Iteration**: Processes all content within runs
- **Type Checking**: Identifies different content types
- **Text Extraction**: Extracts text from text content
- **Tab Conversion**: Converts tabs to tab characters
- **Text Assembly**: Combines all content into run text

TAB HANDLING:
- **Simple Conversion**: Converts TabContent to tab character (\t)
- **Spacing Preservation**: Maintains spacing structure in text
- **Clean Output**: Uses standard tab characters for compatibility

ERROR HANDLING:
- **Missing Content**: Handles runs with no content gracefully
- **Unknown Types**: Ignores unrecognized content types
- **Empty Runs**: Returns empty string for runs without content

TECHNICAL FEATURES:
- **Static Methods**: Stateless operation for efficiency
- **Content Type Handling**: Supports different run content types
- **Text Generation**: Creates clean plain text output
- **Simple Design**: Minimal complexity for reliable operation

INTEGRATION POINTS:
- **Paragraph Converter**: Used by paragraph converters for run processing
- **Text Generator**: Integrates with document-level text generation

USAGE EXAMPLES:

**Basic Run Conversion:**
```python
text = RunConverter.convert_run(run)
```

**Text with Tabs:**
```python
# Run with text and tab content
run_text = RunConverter.convert_run(run)  # "Hello\tworld"
```

TECHNICAL NOTES:
- Uses static methods for stateless operation
- Supports different run content types
- Maintains simple and reliable text conversion
- Integrates seamlessly with the broader text conversion system
- Provides clean text output for accurate document representation 