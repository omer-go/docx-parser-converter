DOCX PARSER CONVERTER - HTML NUMBERING_CONVERTER.PY DOCUMENTATION
===================================================================

FILE PURPOSE:
This file contains the NumberingConverter class that converts DOCX numbering and list formatting to HTML representation. It handles the conversion of numbered and bulleted lists, maintaining proper numbering sequences, indentation, and formatting for HTML output.

IMPORTS:
- docx_parser_converter.docx_parsers.models.paragraph_models.Paragraph: For paragraph data model
- docx_parser_converter.docx_parsers.models.numbering_models: For numbering data models (NumberingLevel, NumberingSchema)

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. NumberingConverter
   Purpose: A converter class for handling numbered paragraphs in DOCX documents
   Description: This class provides static methods for converting DOCX numbering and list formatting to HTML representation. It maintains numbering counters across multiple levels, handles various numbering formats, and generates appropriate HTML markup with styling for lists and numbered content.

   CLASS ATTRIBUTES:
   - _numbering_counters: Dictionary maintaining counter state for different numbering instances

   METHODS:

   reset_counters() [STATIC METHOD]
   Purpose: Resets all numbering counters
   Description: Clears the internal numbering counter state, typically called at the beginning of document conversion to ensure clean numbering sequences.

   convert_numbering(paragraph: Paragraph, numbering_schema: NumberingSchema) -> str [STATIC METHOD]
   Purpose: Converts the numbering for a given paragraph to its HTML representation
   Parameters:
   - paragraph (Paragraph): The paragraph containing the numbering to convert
   - numbering_schema (NumberingSchema): The schema containing numbering definitions
   Returns: str - The HTML representation of the numbering
   Description: Main conversion method that processes paragraph numbering and generates HTML markup. The method:
   
   1. **Level Retrieval**: Gets the appropriate numbering level from the schema
   2. **Counter Management**: Updates and maintains counters for hierarchical numbering
   3. **Format Application**: Applies the specified numbering format (decimal, roman, letters, bullets)
   4. **Text Generation**: Replaces placeholders in level text with formatted numbers
   5. **Styling Application**: Applies fonts, indentation, and spacing
   6. **HTML Generation**: Creates properly formatted HTML spans with styling
   
   Handles complex numbering scenarios including:
   - Multi-level hierarchical numbering
   - Various numbering formats (decimal, roman numerals, letters, bullets)
   - Font specifications and styling
   - Indentation and spacing calculations
   - Tab positioning and padding

   get_numbering_level(numbering_schema, numId: int, ilvl: int) -> NumberingLevel [STATIC METHOD]
   Purpose: Retrieves the numbering level from the numbering schema
   Parameters:
   - numbering_schema: The schema containing numbering definitions
   - numId (int): The numbering ID
   - ilvl (int): The numbering level
   Returns: NumberingLevel - The retrieved numbering level
   Raises: ValueError - If the numbering level is not found
   Description: Locates and returns the specific numbering level definition from the numbering schema based on numbering ID and level.

   format_number(counter: int, numFmt: str) -> str [STATIC METHOD]
   Purpose: Formats the counter according to the specified numbering format
   Parameters:
   - counter (int): The current counter value
   - numFmt (str): The numbering format (e.g., "decimal", "lowerRoman")
   Returns: str - The formatted number
   Description: Converts numeric counters to various numbering formats including decimal, roman numerals, letters, and bullets.

   to_roman(num: int) -> str [STATIC METHOD]
   Purpose: Converts a number to its Roman numeral representation
   Parameters:
   - num (int): The number to convert
   Returns: str - The Roman numeral representation
   Description: Helper method that converts integers to Roman numeral format using standard conversion algorithms.

   to_upper_letter(num: int) -> str [STATIC METHOD]
   Purpose: Converts a number to its uppercase letter representation
   Parameters:
   - num (int): The number to convert
   Returns: str - The uppercase letter representation
   Description: Converts numbers to uppercase letters (A, B, C, etc.) for alphabetic numbering.

   to_lower_letter(num: int) -> str [STATIC METHOD]
   Purpose: Converts a number to its lowercase letter representation
   Parameters:
   - num (int): The number to convert
   Returns: str - The lowercase letter representation
   Description: Converts numbers to lowercase letters (a, b, c, etc.) for alphabetic numbering.

INSTANCE ATTRIBUTES:
None (static method class with class-level counter storage).

DATA MODELS USED:
- Paragraph: Paragraph elements with numbering information
- NumberingSchema: Complete numbering definitions and instances
- NumberingLevel: Individual level specifications with formatting

DEPENDENCIES:
- Numbering data models for structured input
- HTML generation for styled output

USAGE CONTEXT:
This converter is used throughout the HTML conversion pipeline to handle numbered and bulleted lists. It provides:
- **Hierarchical Numbering**: Supports multi-level numbering with proper counter management
- **Format Variety**: Handles decimal, roman, alphabetic, and bullet formats
- **Styling Integration**: Applies fonts, indentation, and spacing
- **HTML Generation**: Creates properly formatted HTML markup

NUMBERING FEATURES SUPPORTED:
- **Multi-Level Lists**: Hierarchical numbering with up to 9 levels
- **Format Types**: Decimal, roman numerals (upper/lower), letters (upper/lower), bullets
- **Counter Management**: Automatic counter incrementing and resetting
- **Font Styling**: Font family application from numbering definitions
- **Indentation**: Proper spacing and indentation calculations
- **Tab Positioning**: Tab-based alignment and spacing

COUNTER MANAGEMENT:
- **State Tracking**: Maintains counters for each numbering instance
- **Level Hierarchy**: Properly resets deeper levels when higher levels increment
- **Instance Isolation**: Separate counter tracking for different numbering instances
- **Reset Capability**: Ability to reset all counters for new documents

STYLING CALCULATIONS:
- **Character Width**: Estimates character widths for spacing calculations
- **Padding Calculation**: Computes appropriate padding based on tab positions
- **Font Application**: Applies font families from numbering definitions
- **Indentation Handling**: Processes left and first-line indentation

ERROR HANDLING:
- **Missing Levels**: Provides fallback bullet character for missing numbering levels
- **Invalid Formats**: Handles unknown numbering formats gracefully
- **Schema Errors**: Continues processing when numbering schema is incomplete

TECHNICAL FEATURES:
- **Static Methods**: Stateless operation with class-level state management
- **Format Conversion**: Comprehensive number-to-format conversion
- **HTML Generation**: Creates properly styled HTML spans
- **Counter Persistence**: Maintains numbering state across paragraphs

INTEGRATION POINTS:
- **Paragraph Converter**: Used by paragraph converters for list handling
- **HTML Generator**: Integrates with HTML generation pipeline
- **Numbering Models**: Uses structured numbering data

TECHNICAL NOTES:
- Uses class-level counters to maintain state across conversions
- Supports complex hierarchical numbering scenarios
- Provides comprehensive format conversion capabilities
- Generates HTML with inline styling for proper list appearance
- Handles edge cases in numbering format and spacing calculations 