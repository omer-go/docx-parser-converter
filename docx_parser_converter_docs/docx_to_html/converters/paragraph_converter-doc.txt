DOCX PARSER CONVERTER - HTML PARAGRAPH_CONVERTER.PY DOCUMENTATION
===================================================================

FILE PURPOSE:
This file contains the ParagraphConverter class that converts DOCX paragraph elements to HTML representation. It handles the conversion of paragraph content, properties, numbering, and contained runs to create properly formatted HTML paragraph elements.

IMPORTS:
- docx_parser_converter.docx_parsers.models.paragraph_models.Paragraph: For paragraph data model
- docx_parser_converter.docx_to_html.converters.style_converter.StyleConverter: For style conversion utilities
- docx_parser_converter.docx_to_html.converters.run_converter.RunConverter: For converting paragraph runs
- docx_parser_converter.docx_to_html.converters.numbering_converter.NumberingConverter: For numbering conversion

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. ParagraphConverter
   Purpose: A converter class for converting DOCX paragraphs to HTML
   Description: This class provides static methods for converting DOCX paragraph elements to HTML representation. It handles paragraph properties, numbering, and all contained runs to create complete HTML paragraph elements with proper styling and content.

   METHODS:

   convert_paragraph(paragraph: Paragraph, numbering_schema) -> str [STATIC METHOD]
   Purpose: Converts a paragraph to its HTML representation
   Parameters:
   - paragraph (Paragraph): The paragraph to convert
   - numbering_schema: The schema containing numbering definitions
   Returns: str - The HTML representation of the paragraph
   Description: Main conversion method that processes a complete paragraph and generates HTML markup. The method:
   
   1. **Paragraph Opening**: Creates opening <p> tag with style attributes
   2. **Numbering Processing**: Adds numbering markup if paragraph is numbered
   3. **Run Conversion**: Converts all runs within the paragraph
   4. **Paragraph Closing**: Adds closing </p> tag
   
   Handles complex paragraph structures including:
   - Paragraph-level styling and formatting
   - Numbered and bulleted lists
   - Multiple runs with different formatting
   - Spacing, indentation, and alignment

   convert_paragraph_properties(properties) -> str [STATIC METHOD]
   Purpose: Converts paragraph properties to an HTML style attribute
   Parameters:
   - properties: The paragraph style properties to convert
   Returns: str - The HTML style attribute representing the paragraph properties
   Description: Converts paragraph-level formatting properties to CSS style attributes. Processes spacing, indentation, and justification properties to create appropriate HTML styling.

INSTANCE ATTRIBUTES:
None (static method class).

DATA MODELS USED:
- Paragraph: Complete paragraph representation with properties and runs
- ParagraphProperties: Paragraph-level formatting specifications
- Run: Individual text runs within the paragraph

DEPENDENCIES:
- StyleConverter for CSS style generation
- RunConverter for processing paragraph runs
- NumberingConverter for list and numbering handling
- Paragraph data models for structured input

USAGE CONTEXT:
This converter is used throughout the HTML generation pipeline to convert paragraph elements. Paragraphs are fundamental content blocks in documents, containing:
- **Text Content**: Individual runs with formatting
- **Paragraph Properties**: Spacing, alignment, indentation
- **Numbering**: List formatting and numbering
- **Structure**: Document flow and organization

PARAGRAPH FEATURES SUPPORTED:
- **Text Runs**: Multiple runs with individual formatting
- **Paragraph Styling**: Spacing, indentation, alignment
- **Numbering**: Numbered and bulleted lists
- **Properties**: Complete paragraph-level formatting
- **HTML Generation**: Proper HTML paragraph elements

CONVERSION PROCESS:
- **Property Processing**: Converts paragraph properties to CSS styles
- **Numbering Integration**: Adds list numbering when present
- **Run Processing**: Converts all contained text runs
- **HTML Assembly**: Creates complete HTML paragraph elements

STYLING INTEGRATION:
- **CSS Generation**: Uses StyleConverter for consistent styling
- **Property Mapping**: Maps DOCX properties to CSS equivalents
- **Style Attributes**: Generates inline style attributes
- **Formatting Preservation**: Maintains original document formatting

ERROR HANDLING:
- **Missing Properties**: Handles paragraphs without properties gracefully
- **Empty Paragraphs**: Processes paragraphs with no runs
- **Numbering Errors**: Continues processing when numbering fails
- **Style Errors**: Provides fallback when style conversion fails

TECHNICAL FEATURES:
- **Static Methods**: Stateless operation for efficiency
- **Modular Design**: Delegates specific conversions to specialized converters
- **HTML Generation**: Creates properly formatted HTML elements
- **Style Integration**: Seamless integration with style conversion

INTEGRATION POINTS:
- **StyleConverter**: Handles CSS style generation
- **RunConverter**: Processes individual text runs
- **NumberingConverter**: Handles list and numbering conversion
- **HTML Generator**: Integrates with document-level HTML generation

USAGE EXAMPLES:

**Basic Paragraph Conversion:**
```python
html = ParagraphConverter.convert_paragraph(paragraph, numbering_schema)
```

**Property Conversion:**
```python
style_attr = ParagraphConverter.convert_paragraph_properties(properties)
```

TECHNICAL NOTES:
- Uses static methods for stateless operation
- Supports complex paragraph structures with multiple runs
- Maintains proper HTML structure and styling
- Integrates seamlessly with the broader HTML conversion system
- Provides complete paragraph representation for accurate document rendering 