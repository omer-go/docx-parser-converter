DOCX PARSER CONVERTER - HTML TABLE_CONVERTER.PY DOCUMENTATION
==============================================================

FILE PURPOSE:
This file contains the TableConverter class that converts DOCX table elements to HTML representation. It handles the conversion of complete tables including properties, grid structure, rows, cells, and all formatting to create properly formatted HTML table elements.

IMPORTS:
- lxml.etree: For XML/HTML element manipulation
- lxml.html: For HTML generation utilities
- docx_parser_converter.docx_parsers.models.table_models.Table: For table data model
- docx_parser_converter.docx_to_html.converters.paragraph_converter.ParagraphConverter: For converting cell content

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. TableConverter
   Purpose: A converter class for converting DOCX tables to HTML
   Description: This class provides static methods for converting DOCX table elements to HTML representation. It handles complete table structures including properties, grid layout, rows, cells, and all formatting to create properly formatted HTML table elements with CSS styling.

   METHODS:

   convert_table(table: Table) -> str [STATIC METHOD]
   Purpose: Converts a table to its HTML representation
   Parameters:
   - table (Table): The table to convert
   Returns: str - The HTML representation of the table
   Description: Main conversion method that processes a complete table and generates HTML markup. The method:
   
   1. **Table Element**: Creates HTML table element with properties
   2. **Grid Processing**: Converts table grid to HTML colgroup
   3. **Row Processing**: Converts all table rows to HTML tbody
   4. **Assembly**: Combines all components into complete table HTML
   
   Handles complex table structures including:
   - Table-level properties and styling
   - Column grid definitions and widths
   - Multiple rows with individual formatting
   - Cell content and properties

   convert_table_properties(properties) -> str [STATIC METHOD]
   Purpose: Converts table properties to an HTML style attribute
   Parameters:
   - properties: The table properties to convert
   Returns: str - The HTML style attribute representing the table properties
   Description: Converts table-level formatting properties to CSS style attributes. Processes width, alignment, indentation, margins, and layout properties.

   convert_grid(columns) -> str [STATIC METHOD]
   Purpose: Converts table grid columns to HTML
   Parameters:
   - columns: The grid columns widths
   Returns: str - The HTML colgroup element representing the grid columns
   Description: Creates HTML colgroup with col elements for each column, setting appropriate widths for table layout.

   convert_rows(rows, tblCellMar) -> etree.Element [STATIC METHOD]
   Purpose: Converts table rows to HTML
   Parameters:
   - rows: The list of table rows to convert
   - tblCellMar: The table cell margins to apply
   Returns: etree.Element - The HTML tbody element representing the rows
   Description: Processes all table rows and creates HTML tbody element containing all row elements.

   convert_row(row, tblCellMar) -> etree.Element [STATIC METHOD]
   Purpose: Converts a table row to HTML
   Parameters:
   - row: The row to convert
   - tblCellMar: The table cell margins to apply
   Returns: etree.Element - The HTML tr element representing the row
   Description: Converts individual table row with properties and all contained cells to HTML tr element.

   convert_row_properties(properties) -> str [STATIC METHOD]
   Purpose: Converts row properties to an HTML style attribute
   Parameters:
   - properties: The row properties to convert
   Returns: str - The HTML style attribute representing the row properties
   Description: Converts row-level formatting properties to CSS style attributes including height and header styling.

   convert_cells(cells, tblCellMar) -> list [STATIC METHOD]
   Purpose: Converts table cells to HTML
   Parameters:
   - cells: The list of table cells to convert
   - tblCellMar: The table cell margins to apply
   Returns: list - List of HTML td elements representing the cells
   Description: Processes all cells in a row and converts them to HTML td elements with proper formatting and content.

   is_cell_empty(cell) -> bool [STATIC METHOD]
   Purpose: Checks if a table cell is empty
   Parameters:
   - cell: The cell to check
   Returns: bool - True if the cell is empty, False otherwise
   Description: Determines whether a table cell contains any meaningful content for rendering decisions.

   convert_cell_properties(properties, tblCellMar) -> str [STATIC METHOD]
   Purpose: Converts cell properties to an HTML style attribute
   Parameters:
   - properties: The cell properties to convert
   - tblCellMar: The table cell margins to apply
   Returns: str - The HTML style attribute representing the cell properties
   Description: Converts cell-level formatting properties to CSS style attributes including width, borders, shading, margins, and alignment.

   map_border_style(val) -> str [STATIC METHOD]
   Purpose: Maps DOCX border styles to CSS border styles
   Parameters:
   - val: The DOCX border style value
   Returns: str - The corresponding CSS border style
   Description: Converts DOCX border style values to appropriate CSS border style values.

   map_vertical_alignment(val) -> str [STATIC METHOD]
   Purpose: Maps DOCX vertical alignment to CSS vertical alignment
   Parameters:
   - val: The DOCX vertical alignment value
   Returns: str - The corresponding CSS vertical alignment
   Description: Converts DOCX vertical alignment values to appropriate CSS vertical-align values.

INSTANCE ATTRIBUTES:
None (static method class).

DATA MODELS USED:
- Table: Complete table representation with properties, grid, and rows
- TableProperties: Table-level formatting specifications
- TableRow: Individual row elements with properties and cells
- TableCell: Individual cell elements with properties and content
- TableGrid: Column structure and width specifications

DEPENDENCIES:
- ParagraphConverter for converting cell content
- lxml for HTML element generation and manipulation
- Table data models for structured input

USAGE CONTEXT:
This converter is used throughout the HTML generation pipeline to convert table elements. Tables are complex document structures containing:
- **Table Properties**: Width, alignment, margins, layout
- **Grid Structure**: Column definitions and widths
- **Row Content**: Multiple rows with individual formatting
- **Cell Content**: Individual cells with text and formatting
- **Complex Layout**: Spanning, merging, and advanced formatting

TABLE FEATURES SUPPORTED:
- **Table Properties**: Width, alignment, indentation, margins, layout
- **Grid Layout**: Column definitions with specific widths
- **Row Formatting**: Height, header rows, styling
- **Cell Formatting**: Width, borders, shading, margins, alignment
- **Content**: Paragraph content within cells
- **HTML Generation**: Proper HTML table elements

CONVERSION PROCESS:
- **Table Assembly**: Creates complete HTML table structure
- **Property Processing**: Converts all formatting to CSS styles
- **Grid Processing**: Creates colgroup for column layout
- **Row Processing**: Converts all rows with formatting
- **Cell Processing**: Converts all cells with content and formatting

STYLING INTEGRATION:
- **CSS Generation**: Creates comprehensive CSS styling
- **Property Mapping**: Maps DOCX properties to CSS equivalents
- **Style Attributes**: Generates inline style attributes
- **Formatting Preservation**: Maintains original table formatting

BORDER AND STYLING:
- **Border Mapping**: Converts DOCX border styles to CSS
- **Alignment Mapping**: Converts vertical alignment values
- **Shading**: Handles background colors and patterns
- **Margins**: Processes cell and table margins

ERROR HANDLING:
- **Missing Properties**: Handles tables without properties gracefully
- **Empty Cells**: Processes cells with no content
- **Grid Errors**: Provides fallback when grid is incomplete
- **Style Errors**: Provides fallback when style conversion fails

TECHNICAL FEATURES:
- **Static Methods**: Stateless operation for efficiency
- **HTML Generation**: Creates properly formatted HTML elements
- **CSS Integration**: Comprehensive CSS style generation
- **Modular Design**: Delegates specific conversions to specialized methods

INTEGRATION POINTS:
- **ParagraphConverter**: Handles cell content conversion
- **HTML Generator**: Integrates with document-level HTML generation
- **Style Conversion**: Uses consistent style mapping

TECHNICAL NOTES:
- Uses static methods for stateless operation
- Supports complex table structures with comprehensive formatting
- Maintains proper HTML table structure and styling
- Integrates seamlessly with the broader HTML conversion system
- Provides complete table representation for accurate document rendering 