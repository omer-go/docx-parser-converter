DOCX PARSER CONVERTER - HTML RUN_CONVERTER.PY DOCUMENTATION
=============================================================

FILE PURPOSE:
This file contains the RunConverter class that converts DOCX run elements to HTML representation. It handles the conversion of text runs, formatting properties, and special content like tabs to create properly formatted HTML span elements.

IMPORTS:
- docx_parser_converter.docx_parsers.models.paragraph_models: For run data models (Run, Paragraph, TextContent, TabContent)
- docx_parser_converter.docx_parsers.models.styles_models.RunStyleProperties: For run style properties
- docx_parser_converter.docx_to_html.converters.style_converter.StyleConverter: For style conversion utilities

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. RunConverter
   Purpose: A converter class for converting DOCX runs to HTML
   Description: This class provides static methods for converting DOCX run elements to HTML representation. It handles run properties, text content, and special elements like tabs to create complete HTML span elements with proper styling and content.

   METHODS:

   convert_run(run: Run, paragraph: Paragraph) -> str [STATIC METHOD]
   Purpose: Converts a run to its HTML representation
   Parameters:
   - run (Run): The run to convert
   - paragraph (Paragraph): The paragraph containing the run
   Returns: str - The HTML representation of the run
   Description: Main conversion method that processes a complete run and generates HTML markup. The method:
   
   1. **Span Opening**: Creates opening <span> tag with style attributes
   2. **Content Processing**: Processes all content within the run
   3. **Text Handling**: Converts text content to HTML
   4. **Tab Processing**: Converts tab elements to HTML spacing
   5. **Span Closing**: Adds closing </span> tag
   
   Handles complex run structures including:
   - Text content with formatting
   - Tab stops and spacing
   - Multiple content types within a single run
   - Run-level styling and properties

   get_next_tab_width(paragraph: Paragraph) -> float [STATIC METHOD]
   Purpose: Gets the width of the next tab stop for the paragraph
   Parameters:
   - paragraph (Paragraph): The paragraph containing the tab stop
   Returns: float - The width of the next tab stop in points
   Description: Calculates the appropriate width for tab stops based on paragraph tab settings. Provides default tab width when no specific tabs are defined.

   convert_run_properties(properties: RunStyleProperties) -> str [STATIC METHOD]
   Purpose: Converts run properties to an HTML style attribute
   Parameters:
   - properties (RunStyleProperties): The run style properties to convert
   Returns: str - The HTML style attribute representing the run properties
   Description: Converts run-level formatting properties to CSS style attributes. Processes bold, italic, underline, color, font, and size properties to create appropriate HTML styling.

INSTANCE ATTRIBUTES:
None (static method class).

DATA MODELS USED:
- Run: Complete run representation with properties and content
- RunStyleProperties: Run-level formatting specifications
- TextContent: Text content within runs
- TabContent: Tab elements within runs
- Paragraph: Container paragraph for context

DEPENDENCIES:
- StyleConverter for CSS style generation
- Run and paragraph data models for structured input
- Content type models for different run content types

USAGE CONTEXT:
This converter is used throughout the HTML generation pipeline to convert run elements. Runs are the smallest formatting units in documents, containing:
- **Text Content**: Individual text with specific formatting
- **Run Properties**: Font, size, color, style formatting
- **Special Content**: Tabs, breaks, and other elements
- **Inline Formatting**: Character-level styling

RUN FEATURES SUPPORTED:
- **Text Content**: Plain text with formatting
- **Character Formatting**: Bold, italic, underline, color, font, size
- **Tab Handling**: Tab stops with proper spacing
- **Properties**: Complete run-level formatting
- **HTML Generation**: Proper HTML span elements

CONVERSION PROCESS:
- **Property Processing**: Converts run properties to CSS styles
- **Content Processing**: Handles different content types within runs
- **Tab Processing**: Converts tabs to HTML spacing elements
- **HTML Assembly**: Creates complete HTML span elements

STYLING INTEGRATION:
- **CSS Generation**: Uses StyleConverter for consistent styling
- **Property Mapping**: Maps DOCX properties to CSS equivalents
- **Style Attributes**: Generates inline style attributes
- **Formatting Preservation**: Maintains original character formatting

TAB HANDLING:
- **Tab Width Calculation**: Determines appropriate tab spacing
- **HTML Spacing**: Creates inline-block elements for tab spacing
- **Paragraph Context**: Uses paragraph tab settings when available
- **Default Spacing**: Provides fallback tab width

ERROR HANDLING:
- **Missing Properties**: Handles runs without properties gracefully
- **Empty Runs**: Processes runs with no content
- **Tab Errors**: Provides default tab width when calculation fails
- **Style Errors**: Provides fallback when style conversion fails

TECHNICAL FEATURES:
- **Static Methods**: Stateless operation for efficiency
- **Content Type Handling**: Supports different run content types
- **HTML Generation**: Creates properly formatted HTML elements
- **Style Integration**: Seamless integration with style conversion

INTEGRATION POINTS:
- **StyleConverter**: Handles CSS style generation
- **Paragraph Converter**: Used by paragraph converters for run processing
- **HTML Generator**: Integrates with document-level HTML generation

USAGE EXAMPLES:

**Basic Run Conversion:**
```python
html = RunConverter.convert_run(run, paragraph)
```

**Property Conversion:**
```python
style_attr = RunConverter.convert_run_properties(properties)
```

**Tab Width Calculation:**
```python
tab_width = RunConverter.get_next_tab_width(paragraph)
```

TECHNICAL NOTES:
- Uses static methods for stateless operation
- Supports complex run structures with multiple content types
- Maintains proper HTML structure and styling
- Integrates seamlessly with the broader HTML conversion system
- Provides complete run representation for accurate text formatting 