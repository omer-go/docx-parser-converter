DOCX PARSER CONVERTER - HTML_GENERATOR.PY DOCUMENTATION
========================================================

FILE PURPOSE:
This file contains the HtmlGenerator class that converts parsed DOCX document schemas into HTML format. It serves as the main HTML generation engine, coordinating the conversion of different document elements (paragraphs, tables) into structured HTML output.

IMPORTS:
- lxml.etree, lxml.html: For HTML element creation and manipulation
- typing.List: For type hints
- docx_parser_converter.docx_parsers.models.paragraph_models.Paragraph: For paragraph data model
- docx_parser_converter.docx_parsers.models.document_models: For document data models (DocumentSchema, DocMargins)
- docx_parser_converter.docx_parsers.models.numbering_models.NumberingSchema: For numbering data model
- docx_parser_converter.docx_parsers.models.table_models.Table: For table data model
- docx_parser_converter.docx_to_html.converters.style_converter.StyleConverter: For style conversion
- docx_parser_converter.docx_to_html.converters.paragraph_converter.ParagraphConverter: For paragraph conversion
- docx_parser_converter.docx_to_html.converters.table_converter.TableConverter: For table conversion
- docx_parser_converter.docx_to_html.converters.numbering_converter.NumberingConverter: For numbering conversion

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. HtmlGenerator
   Purpose: A generator class for converting DOCX document schema to HTML
   Description: This class provides static methods for converting parsed DOCX document structures into HTML format. It coordinates the conversion process by delegating specific element conversions to specialized converters while maintaining the overall document structure.

   METHODS:

   generate_html(document_schema: DocumentSchema, numbering_schema: NumberingSchema) -> str [STATIC METHOD]
   Purpose: Generates HTML content from the given document schema
   Parameters:
   - document_schema (DocumentSchema): The schema containing elements from document.xml
   - numbering_schema (NumberingSchema): The schema containing numbering definitions
   Returns: str - The generated HTML content
   Description: Main HTML generation method that creates a complete HTML document structure. The method:
   
   1. Creates the root HTML element structure
   2. Resets numbering counters for consistent list numbering
   3. Generates the HTML body using document elements and margins
   4. Returns the complete HTML as a formatted string

   The method produces well-formed HTML with proper structure and formatting.

   generate_html_body(doc_margins: DocMargins, elements: List[Paragraph | Table], numbering_schema: NumberingSchema) -> etree.Element [STATIC METHOD]
   Purpose: Generates the body of the HTML content from the given document elements
   Parameters:
   - doc_margins (DocMargins): The document margins for page layout
   - elements (List[Paragraph | Table]): The list of document elements (paragraphs and tables)
   - numbering_schema (NumberingSchema): The schema containing numbering definitions
   Returns: etree.Element - The generated HTML body element
   Description: Creates the HTML body content by processing document elements in order. The method:
   
   1. Creates a container div element for the document content
   2. Applies document margin styles if margins are specified
   3. Iterates through document elements and converts each appropriately:
      - Paragraphs are converted using ParagraphConverter
      - Tables are converted using TableConverter
   4. Maintains element order and document structure
   5. Returns the complete body element with all converted content

INSTANCE ATTRIBUTES:
None (static method class).

DATA MODELS USED:
- DocumentSchema: Top-level document structure containing elements and margins
- Paragraph: Individual paragraph elements with content and formatting
- Table: Table elements with structure and formatting
- NumberingSchema: Numbering definitions for lists
- DocMargins: Document margin specifications

DEPENDENCIES:
- lxml for HTML element creation and manipulation
- Specialized converters for different element types
- Document data models for structured input
- HTML fragment processing for element integration

USAGE CONTEXT:
This generator is the main entry point for HTML conversion in the DOCX to HTML pipeline. It provides:
- Complete HTML document generation from parsed DOCX data
- Coordination of specialized converters for different element types
- Proper HTML structure and formatting
- Integration of document-level properties like margins

CONVERSION COORDINATION:
The generator acts as a coordinator, delegating specific conversion tasks to specialized converters:
- StyleConverter: Handles margin and style conversions
- ParagraphConverter: Converts paragraphs with formatting and numbering
- TableConverter: Converts tables with structure and styling
- NumberingConverter: Manages list numbering and formatting

HTML STRUCTURE GENERATED:
- Root HTML element with proper structure
- Body element containing all document content
- Container div with document margins applied
- Properly nested elements maintaining document hierarchy
- Well-formed HTML suitable for web display

ERROR HANDLING:
- Uses specialized converters that handle missing elements gracefully
- Maintains HTML structure even with incomplete document data
- Provides fallback formatting when specific properties are missing

TECHNICAL NOTES:
- Uses static methods for stateless operation
- Resets numbering counters for consistent list processing
- Maintains document element order during conversion
- Produces pretty-printed HTML for readability
- Integrates HTML fragments seamlessly into document structure 