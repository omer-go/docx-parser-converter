DOCX PARSER CONVERTER - DOCX_TO_HTML_CONVERTER.PY DOCUMENTATION
================================================================

FILE PURPOSE:
This file contains the DocxToHtmlConverter class that provides the main interface for converting DOCX files to HTML format. It serves as the primary entry point for HTML conversion, coordinating the parsing, processing, and generation phases of the conversion pipeline.

IMPORTS:
- os: For file system operations and path validation
- docx_parser_converter.docx_to_html.docx_processor.DocxProcessor: For processing DOCX components
- docx_parser_converter.docx_to_html.html_generator.HtmlGenerator: For generating HTML output
- docx_parser_converter.docx_parsers.utils.read_binary_from_file_path: For file I/O operations

FUNCTIONS:
None defined outside of classes.

CLASSES:

1. DocxToHtmlConverter
   Purpose: A converter class for converting DOCX files to HTML
   Description: This class provides a high-level interface for converting DOCX documents to HTML format. It encapsulates the entire conversion pipeline including document parsing, style processing, and HTML generation, making it easy to convert DOCX files with a simple API.

   METHODS:

   __init__(self, docx_file: bytes, use_default_values: bool = True)
   Purpose: Initializes the DocxToHtmlConverter with the given DOCX file
   Parameters:
   - docx_file (bytes): The binary content of the DOCX file
   - use_default_values (bool): Whether to use default values for missing styles and numbering (defaults to True)
   Description: Sets up the converter by processing the DOCX file through DocxProcessor to extract document schema, styles schema, and numbering schema. The processing happens immediately during initialization, preparing all necessary data for HTML conversion.

   convert_to_html(self) -> str
   Purpose: Converts the DOCX file to HTML
   Returns: str - The generated HTML content
   Description: Main conversion method that generates HTML from the processed document schemas. Uses HtmlGenerator to create well-formed HTML with proper styling and structure. Returns the complete HTML document as a string ready for output or further processing.

   save_html_to_file(self, html_content: str, output_path: str) -> None
   Purpose: Saves the generated HTML content to a file
   Parameters:
   - html_content (str): The HTML content to save
   - output_path (str): The path to save the HTML file
   Returns: None
   Description: Utility method for saving HTML content to a file with proper encoding (UTF-8). Includes error handling for file I/O operations and provides informative error messages if saving fails.

INSTANCE ATTRIBUTES:
- docx_file: The binary content of the DOCX file
- document_schema: The processed document structure and content
- styles_schema: The processed style definitions and formatting
- numbering_schema: The processed numbering and list definitions

DATA MODELS USED:
- DocumentSchema: Complete document structure with elements and margins
- StylesSchema: Style definitions and formatting information
- NumberingSchema: List and numbering definitions

DEPENDENCIES:
- DocxProcessor for DOCX file processing and schema extraction
- HtmlGenerator for HTML generation from processed schemas
- File I/O utilities for reading DOCX files and writing HTML output

USAGE CONTEXT:
This converter serves as the main entry point for HTML conversion workflows. It provides:
- **Simple API**: Easy-to-use interface for DOCX to HTML conversion
- **Complete Pipeline**: Handles all aspects of conversion from parsing to output
- **Error Handling**: Robust error handling throughout the conversion process
- **File Operations**: Built-in support for reading DOCX files and saving HTML output

CONVERSION WORKFLOW:
1. **Initialization**: Process DOCX file to extract all necessary schemas
2. **Conversion**: Generate HTML from processed document data
3. **Output**: Save HTML content to file or return as string

USAGE EXAMPLES:

**Basic Conversion:**
```python
docx_file_content = read_binary_from_file_path("document.docx")
converter = DocxToHtmlConverter(docx_file_content)
html_content = converter.convert_to_html()
```

**Complete Workflow with File Output:**
```python
docx_file_content = read_binary_from_file_path("input.docx")
converter = DocxToHtmlConverter(docx_file_content, use_default_values=True)
html_content = converter.convert_to_html()
converter.save_html_to_file(html_content, "output.html")
```

ERROR HANDLING:
- **File I/O Errors**: Comprehensive error handling for file operations
- **Processing Errors**: Delegates error handling to DocxProcessor for robust processing
- **Generation Errors**: Handles HTML generation errors gracefully
- **Encoding Issues**: Uses UTF-8 encoding for proper character handling

MAIN SECTION:
The file includes a main section that demonstrates complete usage:
1. Validates input file existence
2. Reads DOCX file content
3. Creates converter instance
4. Generates HTML output
5. Saves HTML to file
6. Provides status feedback

TECHNICAL FEATURES:
- **Immediate Processing**: Processes DOCX file during initialization for efficiency
- **Schema Caching**: Stores processed schemas for multiple conversion operations
- **UTF-8 Support**: Proper encoding handling for international characters
- **Path Validation**: File existence checking before processing
- **Status Reporting**: Informative messages for successful operations

INTEGRATION POINTS:
- **DocxProcessor**: Handles DOCX parsing and schema extraction
- **HtmlGenerator**: Manages HTML generation and formatting
- **File Utilities**: Provides file I/O operations for DOCX reading

TECHNICAL NOTES:
- Processes DOCX file once during initialization for efficiency
- Supports multiple HTML generation calls from the same processed data
- Provides clean separation between processing and generation phases
- Includes comprehensive error handling for production use
- Maintains compatibility with various DOCX file formats and structures 